{"ast":null,"code":"import Key from \"./Key\";\nimport ServerError from \"./ServerError\";\nimport AuthorizationError from \"./AuthorizationError\";\nfunction Request(action, params) {\n  const body = {\n    action: action,\n    params: params\n  };\n  const response = fetch('https://api.valantis.store:41000/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8',\n      'X-Auth': Key()\n    },\n    body: JSON.stringify(body)\n  }).then(res => {\n    //обрабатываем ответ сервера (не ошибка для then)\n    if (!res.ok) {\n      console.log(`Ошибка запроса ${body.action == \"get_ids\" ? 'id товаров' : 'данных о товарах'} . Код: ${res.status}`);\n      switch (res.status) {\n        case 500:\n          throw new ServerError();\n          break;\n        case 401:\n          throw new AuthorizationError();\n          break;\n        default:\n          throw new Error();\n          break;\n      }\n    } else {\n      return res;\n    }\n  }, e => {\n    throw e;\n  }).then(res => {\n    //приводим строку ответа к объекту \n    return res.json();\n  }, e => {\n    throw e;\n  }).then(res => {\n    // фильтруем дубликаты для ответов в виде массивов с объектами\n    if (body.action == \"get_ids\" || body.action == \"filter\" || body.action == \"get_fields\") {\n      return res.result;\n    } else {\n      const tempArr = [];\n      const uniqueRes = [];\n      res.result.map(item => {\n        if (!tempArr.find(tempItem => tempItem == item.id)) {\n          tempArr.push(item.id);\n          uniqueRes.push(item);\n        }\n      });\n      return uniqueRes;\n    }\n  }, e => {\n    throw e;\n  });\n  return response;\n}\n_c = Request;\nexport default Request;\nvar _c;\n$RefreshReg$(_c, \"Request\");","map":{"version":3,"names":["Key","ServerError","AuthorizationError","Request","action","params","body","response","fetch","method","headers","JSON","stringify","then","res","ok","console","log","status","Error","e","json","result","tempArr","uniqueRes","map","item","find","tempItem","id","push","_c","$RefreshReg$"],"sources":["C:/Users/kiril/Desktop/Практика/test-task-valantis/src/components/Request.jsx"],"sourcesContent":["import Key from \"./Key\";\r\nimport ServerError from \"./ServerError\";\r\nimport AuthorizationError from \"./AuthorizationError\";\r\n\r\nfunction Request(action, params) {\r\n  const body = {\r\n    action: action, \r\n    params: params\r\n  }\r\n  const response = fetch('https://api.valantis.store:41000/',\r\n    { method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n      'X-Auth': Key()\r\n    },\r\n    body: JSON.stringify(body)\r\n    }\r\n  ).then((res) => { //обрабатываем ответ сервера (не ошибка для then)\r\n    if(!res.ok) {\r\n      console.log(`Ошибка запроса ${body.action == \"get_ids\" ? 'id товаров': 'данных о товарах'} . Код: ${res.status}`)\r\n      switch (res.status) {\r\n        case 500:\r\n          throw new ServerError\r\n          break;\r\n        case 401:\r\n          throw new AuthorizationError\r\n          break;\r\n      \r\n        default:\r\n          throw new Error\r\n          break;\r\n      }\r\n    } else {\r\n      return res\r\n    }\r\n  }, (e) => { throw e }).then((res) => { //приводим строку ответа к объекту \r\n    return res.json() \r\n  }, (e) => { throw e; }).then((res) => { // фильтруем дубликаты для ответов в виде массивов с объектами\r\n    if (body.action == \"get_ids\" || body.action == \"filter\" || body.action == \"get_fields\") {\r\n      return res.result\r\n    } else {\r\n      const tempArr = []\r\n      const uniqueRes = []\r\n      res.result.map((item) => {\r\n        if (!tempArr.find(tempItem => tempItem == item.id)) {\r\n          tempArr.push(item.id)\r\n          uniqueRes.push(item)\r\n        }\r\n      })\r\n      \r\n      return uniqueRes\r\n    }    \r\n  }, (e) => { throw e; })\r\n\r\n  return response\r\n}\r\n\r\nexport default Request"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB;AAErD,SAASC,OAAOA,CAACC,MAAM,EAAEC,MAAM,EAAE;EAC/B,MAAMC,IAAI,GAAG;IACXF,MAAM,EAAEA,MAAM;IACdC,MAAM,EAAEA;EACV,CAAC;EACD,MAAME,QAAQ,GAAGC,KAAK,CAAC,mCAAmC,EACxD;IAAEC,MAAM,EAAE,MAAM;IAChBC,OAAO,EAAE;MACP,cAAc,EAAE,gCAAgC;MAChD,QAAQ,EAAEV,GAAG,CAAC;IAChB,CAAC;IACDM,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;EACzB,CACF,CAAC,CAACO,IAAI,CAAEC,GAAG,IAAK;IAAE;IAChB,IAAG,CAACA,GAAG,CAACC,EAAE,EAAE;MACVC,OAAO,CAACC,GAAG,CAAE,kBAAiBX,IAAI,CAACF,MAAM,IAAI,SAAS,GAAG,YAAY,GAAE,kBAAmB,WAAUU,GAAG,CAACI,MAAO,EAAC,CAAC;MACjH,QAAQJ,GAAG,CAACI,MAAM;QAChB,KAAK,GAAG;UACN,MAAM,IAAIjB,WAAW,CAAD,CAAC;UACrB;QACF,KAAK,GAAG;UACN,MAAM,IAAIC,kBAAkB,CAAD,CAAC;UAC5B;QAEF;UACE,MAAM,IAAIiB,KAAK,CAAD,CAAC;UACf;MACJ;IACF,CAAC,MAAM;MACL,OAAOL,GAAG;IACZ;EACF,CAAC,EAAGM,CAAC,IAAK;IAAE,MAAMA,CAAC;EAAC,CAAC,CAAC,CAACP,IAAI,CAAEC,GAAG,IAAK;IAAE;IACrC,OAAOA,GAAG,CAACO,IAAI,CAAC,CAAC;EACnB,CAAC,EAAGD,CAAC,IAAK;IAAE,MAAMA,CAAC;EAAE,CAAC,CAAC,CAACP,IAAI,CAAEC,GAAG,IAAK;IAAE;IACtC,IAAIR,IAAI,CAACF,MAAM,IAAI,SAAS,IAAIE,IAAI,CAACF,MAAM,IAAI,QAAQ,IAAIE,IAAI,CAACF,MAAM,IAAI,YAAY,EAAE;MACtF,OAAOU,GAAG,CAACQ,MAAM;IACnB,CAAC,MAAM;MACL,MAAMC,OAAO,GAAG,EAAE;MAClB,MAAMC,SAAS,GAAG,EAAE;MACpBV,GAAG,CAACQ,MAAM,CAACG,GAAG,CAAEC,IAAI,IAAK;QACvB,IAAI,CAACH,OAAO,CAACI,IAAI,CAACC,QAAQ,IAAIA,QAAQ,IAAIF,IAAI,CAACG,EAAE,CAAC,EAAE;UAClDN,OAAO,CAACO,IAAI,CAACJ,IAAI,CAACG,EAAE,CAAC;UACrBL,SAAS,CAACM,IAAI,CAACJ,IAAI,CAAC;QACtB;MACF,CAAC,CAAC;MAEF,OAAOF,SAAS;IAClB;EACF,CAAC,EAAGJ,CAAC,IAAK;IAAE,MAAMA,CAAC;EAAE,CAAC,CAAC;EAEvB,OAAOb,QAAQ;AACjB;AAACwB,EAAA,GAnDQ5B,OAAO;AAqDhB,eAAeA,OAAO;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}