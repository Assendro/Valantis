{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiril\\\\Desktop\\\\\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430\\\\test-task-valantis\\\\src\\\\components\\\\Request.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Key from \"./Key\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GetIds() {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [ids, setIds] = useState([]);\n  const body = {\n    action: \"get_ids\",\n    \"params\": {\n      \"offset\": 0,\n      \"limit\": 50\n    }\n  };\n  useEffect(() => {\n    fetch(\"https://api.valantis.store:41000/\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        'X-Auth': Key()\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setIds(result.result);\n    },\n    // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n    // чтобы не перехватывать исключения из ошибок в самих компонентах.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n  if (error) {\n    console.log(`Ошибка: ${error.message}`);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  } else {\n    console.log(ids);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: ids.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [id.name, \" \", id.price]\n      }, id.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(GetIds, \"/pwSWG0XNmf1XQ78+FZVVhT6FUU=\");\n_c = GetIds;\nexport default GetIds;\nvar _c;\n$RefreshReg$(_c, \"GetIds\");","map":{"version":3,"names":["React","useState","useEffect","Key","jsxDEV","_jsxDEV","GetIds","_s","error","setError","isLoaded","setIsLoaded","ids","setIds","body","action","fetch","method","headers","JSON","stringify","then","res","json","result","console","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","name","price","_c","$RefreshReg$"],"sources":["C:/Users/kiril/Desktop/Практика/test-task-valantis/src/components/Request.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Key from \"./Key\";\r\n\r\nfunction GetIds() {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [ids, setIds] = useState([]);\r\n  const body = {\r\n    action: \"get_ids\",\r\n    \"params\": {\"offset\": 0, \"limit\": 50}\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.valantis.store:41000/\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8',\r\n        'X-Auth': Key()\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setIds(result.result);\r\n        },\r\n        // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\r\n        // чтобы не перехватывать исключения из ошибок в самих компонентах.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  if (error) {\r\n    console.log(`Ошибка: ${error.message}`);\r\n  } else if (!isLoaded) {\r\n    return <div>Загрузка...</div>;\r\n  } else {\r\n    console.log(ids)\r\n    return (\r\n      <ul>\r\n        {ids.map(id => (\r\n          <li key={id.id}>\r\n            {id.name} {id.price}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GetIds"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACW,GAAG,EAAEC,MAAM,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAMa,IAAI,GAAG;IACXC,MAAM,EAAE,SAAS;IACjB,QAAQ,EAAE;MAAC,QAAQ,EAAE,CAAC;MAAE,OAAO,EAAE;IAAE;EACrC,CAAC;EAEDb,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,mCAAmC,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,gCAAgC;QAChD,QAAQ,EAAEf,GAAG,CAAC;MAChB,CAAC;MACDW,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;IAC3B,CAAC,CAAC,CACCO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CACFG,MAAM,IAAK;MACVb,WAAW,CAAC,IAAI,CAAC;MACjBE,MAAM,CAACW,MAAM,CAACA,MAAM,CAAC;IACvB,CAAC;IACD;IACA;IACChB,KAAK,IAAK;MACTG,WAAW,CAAC,IAAI,CAAC;MACjBF,QAAQ,CAACD,KAAK,CAAC;IACjB,CACF,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIA,KAAK,EAAE;IACTiB,OAAO,CAACC,GAAG,CAAE,WAAUlB,KAAK,CAACmB,OAAQ,EAAC,CAAC;EACzC,CAAC,MAAM,IAAI,CAACjB,QAAQ,EAAE;IACpB,oBAAOL,OAAA;MAAAuB,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC/B,CAAC,MAAM;IACLP,OAAO,CAACC,GAAG,CAACd,GAAG,CAAC;IAChB,oBACEP,OAAA;MAAAuB,QAAA,EACGhB,GAAG,CAACqB,GAAG,CAACC,EAAE,iBACT7B,OAAA;QAAAuB,QAAA,GACGM,EAAE,CAACC,IAAI,EAAC,GAAC,EAACD,EAAE,CAACE,KAAK;MAAA,GADZF,EAAE,CAACA,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAET;AACF;AAACzB,EAAA,CAjDQD,MAAM;AAAA+B,EAAA,GAAN/B,MAAM;AAmDf,eAAeA,MAAM;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}