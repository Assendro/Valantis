{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiril\\\\Desktop\\\\\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430\\\\test-task-valantis\\\\src\\\\components\\\\Items.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Key from \"./Key\";\nimport Ids from \"./Ids\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Items() {\n  _s();\n  if (Array.isArray(Ids)) {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n    const body = {\n      action: \"get_items\",\n      params: {\n        ids: []\n      }\n    };\n    useEffect(() => {\n      fetch(\"https://api.valantis.store:41000/\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n          'X-Auth': Key()\n        },\n        body: JSON.stringify(body)\n      }).then(res => res.json()).then(res => {\n        setIsLoaded(true);\n        let tempSet = new Set(res.result);\n        setItems(Array.from(tempSet));\n      },\n      // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n      // чтобы не перехватывать исключения из ошибок в самих компонентах.\n      error => {\n        setIsLoaded(true);\n        setError(error);\n      });\n    }, []);\n    if (error) {\n      console.log(`Ошибка: ${error.message}`);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this);\n    } else {\n      return items;\n    }\n  }\n}\n_s(Items, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n_c = Items;\nexport default Items;\nvar _c;\n$RefreshReg$(_c, \"Items\");","map":{"version":3,"names":["React","useState","useEffect","Key","Ids","jsxDEV","_jsxDEV","Items","_s","Array","isArray","error","setError","isLoaded","setIsLoaded","items","setItems","body","action","params","ids","fetch","method","headers","JSON","stringify","then","res","json","tempSet","Set","result","from","console","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kiril/Desktop/Практика/test-task-valantis/src/components/Items.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Key from \"./Key\";\r\nimport Ids from \"./Ids\";\r\n\r\nfunction Items() {\r\n  if (Array.isArray(Ids)) {  const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n\r\n\r\n    const body = {\r\n      action: \"get_items\",\r\n      params: {ids: []}\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n      fetch(\"https://api.valantis.store:41000/\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n          'X-Auth': Key()\r\n        },\r\n        body: JSON.stringify(body)\r\n      })\r\n        .then(res => res.json())\r\n        .then(\r\n          (res) => {\r\n            setIsLoaded(true);\r\n            let tempSet = new Set(res.result)\r\n            setItems(Array.from(tempSet));\r\n          },\r\n          // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\r\n          // чтобы не перехватывать исключения из ошибок в самих компонентах.\r\n          (error) => {\r\n            setIsLoaded(true);\r\n            setError(error);\r\n          }\r\n        )\r\n    }, [])\r\n    if (error) {\r\n      console.log(`Ошибка: ${error.message}`);\r\n    } else if (!isLoaded) {\r\n      return <div>Загрузка...</div>;\r\n    } else {\r\n      return items;\r\n    }}\r\n\r\n\r\n}\r\n\r\n\r\nexport default Items"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,IAAIC,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,EAAE;IAAG,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;IACjE,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;IAC/C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;IAGtC,MAAMgB,IAAI,GAAG;MACXC,MAAM,EAAE,WAAW;MACnBC,MAAM,EAAE;QAACC,GAAG,EAAE;MAAE;IAClB,CAAC;IAEDlB,SAAS,CAAC,MAAM;MAEdmB,KAAK,CAAC,mCAAmC,EAAE;QACzCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,gCAAgC;UAChD,QAAQ,EAAEpB,GAAG,CAAC;QAChB,CAAC;QACDc,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACR,IAAI;MAC3B,CAAC,CAAC,CACCS,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CACFC,GAAG,IAAK;QACPb,WAAW,CAAC,IAAI,CAAC;QACjB,IAAIe,OAAO,GAAG,IAAIC,GAAG,CAACH,GAAG,CAACI,MAAM,CAAC;QACjCf,QAAQ,CAACP,KAAK,CAACuB,IAAI,CAACH,OAAO,CAAC,CAAC;MAC/B,CAAC;MACD;MACA;MACClB,KAAK,IAAK;QACTG,WAAW,CAAC,IAAI,CAAC;QACjBF,QAAQ,CAACD,KAAK,CAAC;MACjB,CACF,CAAC;IACL,CAAC,EAAE,EAAE,CAAC;IACN,IAAIA,KAAK,EAAE;MACTsB,OAAO,CAACC,GAAG,CAAE,WAAUvB,KAAK,CAACwB,OAAQ,EAAC,CAAC;IACzC,CAAC,MAAM,IAAI,CAACtB,QAAQ,EAAE;MACpB,oBAAOP,OAAA;QAAA8B,QAAA,EAAK;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAC/B,CAAC,MAAM;MACL,OAAOzB,KAAK;IACd;EAAC;AAGL;AAACP,EAAA,CA7CQD,KAAK;AAAAkC,EAAA,GAALlC,KAAK;AAgDd,eAAeA,KAAK;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}