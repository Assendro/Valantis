{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import Key from\"./Key\";import{jsx as _jsx}from\"react/jsx-runtime\";function Ids(){const[error,setError]=useState(null);const[isLoaded,setIsLoaded]=useState(false);const[ids,setIds]=useState([]);const body={action:\"get_ids\",params:{offset:0}};useEffect(()=>{fetch(\"https://api.valantis.store:41000/\",{method:'POST',headers:{'Content-Type':'application/json;charset=utf-8','X-Auth':Key()},body:JSON.stringify(body)}).then(res=>res.json()).then(res=>{setIsLoaded(true);let tempSet=new Set(res.result);setIds(Array.from(tempSet));},// Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n// чтобы не перехватывать исключения из ошибок в самих компонентах.\nerror=>{setIsLoaded(true);setError(error);});},[]);if(error){console.log(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(error.message));}else if(!isLoaded){return/*#__PURE__*/_jsx(\"div\",{children:\"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"});}else{return ids;}}export default Ids;","map":{"version":3,"names":["React","useState","useEffect","Key","jsx","_jsx","Ids","error","setError","isLoaded","setIsLoaded","ids","setIds","body","action","params","offset","fetch","method","headers","JSON","stringify","then","res","json","tempSet","Set","result","Array","from","console","log","concat","message","children"],"sources":["C:/Users/kiril/Desktop/Практика/test-task-valantis/src/components/Ids.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Key from \"./Key\";\r\n\r\nfunction Ids() {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [ids, setIds] = useState([]);\r\n  const body = {\r\n    action: \"get_ids\",\r\n    params: {offset: 0}\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.valantis.store:41000/\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8',\r\n        'X-Auth': Key()\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (res) => {\r\n          setIsLoaded(true);\r\n          let tempSet = new Set(res.result)\r\n          setIds(Array.from(tempSet));\r\n        },\r\n        // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\r\n        // чтобы не перехватывать исключения из ошибок в самих компонентах.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n  if (error) {\r\n    console.log(`Ошибка: ${error.message}`);\r\n  } else if (!isLoaded) {\r\n    return <div>Загрузка...</div>;\r\n  } else {\r\n    return ids;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Ids"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,GAAG,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACQ,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAACU,GAAG,CAAEC,MAAM,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAClC,KAAM,CAAAY,IAAI,CAAG,CACXC,MAAM,CAAE,SAAS,CACjBC,MAAM,CAAE,CAACC,MAAM,CAAE,CAAC,CACpB,CAAC,CAEDd,SAAS,CAAC,IAAM,CACde,KAAK,CAAC,mCAAmC,CAAE,CACzCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,gCAAgC,CAChD,QAAQ,CAAEhB,GAAG,CAAC,CAChB,CAAC,CACDU,IAAI,CAAEO,IAAI,CAACC,SAAS,CAACR,IAAI,CAC3B,CAAC,CAAC,CACCS,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CACFC,GAAG,EAAK,CACPb,WAAW,CAAC,IAAI,CAAC,CACjB,GAAI,CAAAe,OAAO,CAAG,GAAI,CAAAC,GAAG,CAACH,GAAG,CAACI,MAAM,CAAC,CACjCf,MAAM,CAACgB,KAAK,CAACC,IAAI,CAACJ,OAAO,CAAC,CAAC,CAC7B,CAAC,CACD;AACA;AACClB,KAAK,EAAK,CACTG,WAAW,CAAC,IAAI,CAAC,CACjBF,QAAQ,CAACD,KAAK,CAAC,CACjB,CACF,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CACN,GAAIA,KAAK,CAAE,CACTuB,OAAO,CAACC,GAAG,0CAAAC,MAAA,CAAYzB,KAAK,CAAC0B,OAAO,CAAE,CAAC,CACzC,CAAC,IAAM,IAAI,CAACxB,QAAQ,CAAE,CACpB,mBAAOJ,IAAA,QAAA6B,QAAA,CAAK,qDAAW,CAAK,CAAC,CAC/B,CAAC,IAAM,CACL,MAAO,CAAAvB,GAAG,CACZ,CAGF,CAGA,cAAe,CAAAL,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}