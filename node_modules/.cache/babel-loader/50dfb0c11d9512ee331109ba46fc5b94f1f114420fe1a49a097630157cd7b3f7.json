{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiril\\\\Desktop\\\\\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430\\\\test-task-valantis\\\\src\\\\components\\\\Request.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Key from \"./Key\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TakeIds() {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [ids, setIds] = useState([]);\n  const body = {\n    action: \"get_ids\",\n    params: {\n      offset: 0\n    }\n  };\n  useEffect(() => {\n    fetch(\"https://api.valantis.store:41000/\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        'X-Auth': Key()\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(res => {\n      setIsLoaded(true);\n      let tempSet = new Set(res.result);\n      setIds(Array.from(tempSet));\n    },\n    // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n    // чтобы не перехватывать исключения из ошибок в самих компонентах.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n  useEffect(() => {\n    if (typeof ids == 'array []') {\n      console.log(123);\n    }\n  });\n  if (error) {\n    console.log(`Ошибка: ${error.message}`);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  } else {\n    return ids;\n  }\n}\n_s(TakeIds, \"i+uf+Mia/TCSjOVVvyBwHq+gpGA=\");\n_c = TakeIds;\nexport default TakeIds;\nvar _c;\n$RefreshReg$(_c, \"TakeIds\");","map":{"version":3,"names":["React","useState","useEffect","Key","jsxDEV","_jsxDEV","TakeIds","_s","error","setError","isLoaded","setIsLoaded","ids","setIds","body","action","params","offset","fetch","method","headers","JSON","stringify","then","res","json","tempSet","Set","result","Array","from","console","log","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kiril/Desktop/Практика/test-task-valantis/src/components/Request.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Key from \"./Key\";\r\n\r\nfunction TakeIds() {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [ids, setIds] = useState([]);\r\n  const body = {\r\n    action: \"get_ids\",\r\n    params: {offset: 0}\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.valantis.store:41000/\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8',\r\n        'X-Auth': Key()\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (res) => {\r\n          setIsLoaded(true);\r\n          let tempSet = new Set(res.result)\r\n          setIds(Array.from(tempSet));\r\n        },\r\n        // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\r\n        // чтобы не перехватывать исключения из ошибок в самих компонентах.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n  useEffect(() => {\r\n    if(typeof ids == 'array []') {\r\n      console.log(123)\r\n    }\r\n  }) \r\n  if (error) {\r\n    console.log(`Ошибка: ${error.message}`);\r\n  } else if (!isLoaded) {\r\n    return <div>Загрузка...</div>;\r\n  } else {\r\n    return ids;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default TakeIds"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACW,GAAG,EAAEC,MAAM,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAMa,IAAI,GAAG;IACXC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;MAACC,MAAM,EAAE;IAAC;EACpB,CAAC;EAEDf,SAAS,CAAC,MAAM;IACdgB,KAAK,CAAC,mCAAmC,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,gCAAgC;QAChD,QAAQ,EAAEjB,GAAG,CAAC;MAChB,CAAC;MACDW,IAAI,EAAEO,IAAI,CAACC,SAAS,CAACR,IAAI;IAC3B,CAAC,CAAC,CACCS,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CACFC,GAAG,IAAK;MACPb,WAAW,CAAC,IAAI,CAAC;MACjB,IAAIe,OAAO,GAAG,IAAIC,GAAG,CAACH,GAAG,CAACI,MAAM,CAAC;MACjCf,MAAM,CAACgB,KAAK,CAACC,IAAI,CAACJ,OAAO,CAAC,CAAC;IAC7B,CAAC;IACD;IACA;IACClB,KAAK,IAAK;MACTG,WAAW,CAAC,IAAI,CAAC;MACjBF,QAAQ,CAACD,KAAK,CAAC;IACjB,CACF,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACNN,SAAS,CAAC,MAAM;IACd,IAAG,OAAOU,GAAG,IAAI,UAAU,EAAE;MAC3BmB,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;IAClB;EACF,CAAC,CAAC;EACF,IAAIxB,KAAK,EAAE;IACTuB,OAAO,CAACC,GAAG,CAAE,WAAUxB,KAAK,CAACyB,OAAQ,EAAC,CAAC;EACzC,CAAC,MAAM,IAAI,CAACvB,QAAQ,EAAE;IACpB,oBAAOL,OAAA;MAAA6B,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC/B,CAAC,MAAM;IACL,OAAO1B,GAAG;EACZ;AAGF;AAACL,EAAA,CA/CQD,OAAO;AAAAiC,EAAA,GAAPjC,OAAO;AAkDhB,eAAeA,OAAO;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}